<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Senior-Junior Exchange</title>
    
</head>
<body>
    <header>
        <h1 class="title">Campus Nexus</h1>
        <p class="subtitle">Connecting Students, Empowering Futures</p>
    </header>
    <div class="container" id="login-page">
        <h2>Step into our Nexus..!</h2>
        <input type="email" id="login-email" placeholder="Email" required>
        <input type="password" id="login-password" placeholder="Password" required>
        <button onclick="login()">Login</button>
        <p>Don't have an account? <a href="#" onclick="showSignupPage()">Sign up</a></p>
    </div>

    <div class="container hidden" id="signup-page">
        <h2>Who's Joining us Today ?</h2>
        <input type="text" id="signup-name" placeholder="Name" required>
        <input type="email" id="signup-email" placeholder="Email" required>
        <input type="text" id="signup-phone" placeholder="Phone Number" required>
        <input type="password" id="signup-password" placeholder="Password" required>
        <select id="signup-role">
            <option value="senior">Senior</option>
            <option value="junior">Junior</option>
        </select>
        <button onclick="signup()">Sign Up</button>
        <p>Already have an account? <a href="#" onclick="showLoginPage()">Login</a></p>
    </div>
    

    <div class="container hidden" id="senior-dashboard">
        <h2>Welcome Senior..!</h2>
        <div class="button-container">
            <button onclick="showAddItemForm()" class="append-items-btn">
                Append Items
            </button>
            <button onclick="showAnswerQuestions()">Answer Questions</button>
        </div>
        

        <div class="hidden" id="add-item-form">
            <h2>Add Item</h2>
            <input type="text" id="item-name" placeholder="Item Name" required>
            <input type="file" id="item-image" accept="image/*" required>
            <input type="number" id="item-price" placeholder="Price" required>
            <button onclick="addItem()">Add Item</button>
        </div>
        <div class="hidden" id="answer-questions">
            <h2>Answer Questions</h2>
            <div class="questions-list" id="questions-list"></div>
        </div>
    </div>

    <div class="container hidden" id="junior-dashboard">
        <h2>Welcome Junior..!</h2>
        <button onclick="showAskQuestionForm()">Ask Questions</button>
        <button onclick="showItemsList()">Accept Items</button>
        <div class="hidden" id="ask-question-form">
            <h2>Ask Question</h2>
            <textarea id="question-text" placeholder="Enter your question"></textarea>
            <button onclick="askQuestion()">Ask</button>
        </div>
        <button onclick="showAnsweredQuestions()">View Answered Questions</button>



        <div class="hidden" id="items-list">
            <h2>Items</h2>
            <div class="items-list" id="items-container"></div>
        </div>
        <div class="hidden" id="answered-questions">
            <h2>Answered Questions</h2>
            <div class="questions-list" id="answered-questions-list"></div>
        </div>
    </div>
    <link rel="stylesheet" href="1css.css">

    
    
    <footer>
        <p>&copy; Campus Nexus. All rights reserved.</p>
    </footer>

    <script>
    

        let users = JSON.parse(localStorage.getItem('users')) || [];
        let questions = JSON.parse(localStorage.getItem('questions')) || [];
        
        let currentUser = null;
        let items = JSON.parse(localStorage.getItem('items')) || [
    {
        name: 'Used Laptop',
        image: 'https://via.placeholder.com/100',
        price: 300
    },
    {
        name: 'Books',
        image: 'https://via.placeholder.com/100',
        price: 50
    }
];

function showJuniorDashboard() {
    document.getElementById('junior-dashboard').classList.remove('hidden');
    document.getElementById('login-page').classList.add('hidden');
    renderJuniorItems(); // Ensure items are displayed
}




        function showLoginPage() {
            hideAllSections();
            document.getElementById('login-page').classList.remove('hidden');
            document.getElementById('signup-page').classList.add('hidden');
        }

        function showSignupPage() {
            hideAllSections();
            document.getElementById('signup-page').classList.remove('hidden');
            document.getElementById('login-page').classList.add('hidden');
        }
        function answerQuestion(index, answer) {
            questions[index].answered = true;
            questions[index].answer = answer;
            localStorage.setItem('questions', JSON.stringify(questions));
            renderQuestions();
        }
        // After adding an item, call renderJuniorItems for juniors to see the new item
// After adding an item, call renderJuniorItems for juniors to see the new item
function addItem() {
    const name = document.getElementById('item-name').value;
    const imageInput = document.getElementById('item-image');
    const price = document.getElementById('item-price').value;

    if (!name || !imageInput.files[0] || !price) {
        alert('Please fill out all fields.');
        return;
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const newItem = {
            name,
            image: e.target.result,
            price
        };

        // Add the new item to the items array
        items.push(newItem);
        localStorage.setItem('items', JSON.stringify(items)); // Store updated items in localStorage

        alert('Item added successfully.');

        // Re-render items for both Senior and Junior
        renderItems(); // Render for senior
        renderJuniorItems(); // Render for junior

        // Clear input fields
        document.getElementById('item-name').value = '';
        document.getElementById('item-image').value = '';
        document.getElementById('item-price').value = '';
    };

    reader.readAsDataURL(imageInput.files[0]);
    localStorage.setItem('items', JSON.stringify(items));
}

// Function to render items for juniors, ensuring they see the new items added by seniors
// Function to render items for juniors, ensuring they see the new items added by seniors
// Function to render items for juniors, ensuring they see the new items added by seniors
function renderJuniorItems() {
    const juniorItemsContainer = document.getElementById('items-container');
    juniorItemsContainer.innerHTML = ''; // Clear any existing items

    // Reload items from localStorage
    const storedItems = JSON.parse(localStorage.getItem('items')) || [];

    storedItems.forEach((item, index) => {
        const div = document.createElement('div');
        div.className = 'item';
        div.innerHTML = `
            <h3>${item.name}</h3>
            <img src="${item.image}" alt="${item.name}">
            <p>Price: ${item.price}</p>
            <button onclick="acceptItem(${index})">Accept</button>
        `;
        juniorItemsContainer.appendChild(div);
    });
}



// Ensure items are fetched from localStorage and rendered on junior login
function showJuniorDashboard() {
    document.getElementById('junior-dashboard').classList.remove('hidden');
    document.getElementById('login-page').classList.add('hidden');

    // Re-render the list of items for the junior after login
    renderJuniorItems();
}

// Render items in the senior dashboard (for reference)
function renderItems() {
    const seniorItemsContainer = document.getElementById('items-container');
    seniorItemsContainer.innerHTML = ''; // Clear existing items

    // Render items for senior dashboard
    items.forEach((item, index) => {
        const div = document.createElement('div');
        div.className = 'item';
        div.innerHTML = `
            <h3>${item.name}</h3>
            <img src="${item.image}" alt="${item.name}">
            <p>Price: ${item.price}</p>
            <button onclick="removeItem(${index})">Remove</button>
        `;
        seniorItemsContainer.appendChild(div);
    });
}

// Function to remove an item from the senior's list
function removeItem(index) {
    items.splice(index, 1); // Remove item from the array
    localStorage.setItem('items', JSON.stringify(items)); // Update localStorage
    renderItems(); // Re-render senior items
    renderJuniorItems(); // Re-render junior items to reflect the change
}

// When junior accepts an item
function acceptItem(index) {
    const acceptedItem = items[index];
    items.splice(index, 1); // Remove the item from the list
    localStorage.setItem('items', JSON.stringify(items)); // Update localStorage
    renderItems(); // Re-render items for senior
    renderJuniorItems(); // Re-render items for junior
    alert(`You have accepted the item: ${acceptedItem.name}`);
    localStorage.setItem('items', JSON.stringify(items));
}




        function login() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            const user = users.find(u => u.email === email && u.password === password);

            if (user) {
                currentUser = user;
                if (user.role === 'senior') {
                    showSeniorDashboard();
                } else {
                    showJuniorDashboard();
                }
            } else {
                alert('Invalid email or password.');
            }
        }

        function signup() {
            const name = document.getElementById('signup-name').value;
            const email = document.getElementById('signup-email').value;
            const phone = document.getElementById('signup-phone').value;
            const password = document.getElementById('signup-password').value;
            const role = document.getElementById('signup-role').value;

            if (users.find(u => u.email === email)) {
                alert('Email already registered.');
                return;
            }

            users.push({ name, email, phone, password, role });
            localStorage.setItem('users', JSON.stringify(users));
            alert('Signup successful. Please login.');
            showLoginPage();
        }

        function showSeniorDashboard() {
            hideAllSections();
            document.getElementById('senior-dashboard').classList.remove('hidden');
            document.getElementById('login-page').classList.add('hidden');
        }

        

        function showAddItemForm() {
            document.getElementById('add-item-form').classList.remove('hidden');
            document.getElementById('answer-questions').classList.add('hidden');
        }

        function showAnsweredQuestions() {
           
    // Show the answered questions section
    document.getElementById('answered-questions').classList.remove('hidden');

    // Hide other sections of the dashboard
    document.getElementById('ask-question-form').classList.add('hidden');
    document.getElementById('items-list').classList.add('hidden');
    
    console.log('Button clicked, showing answered questions...');
    console.log('Questions array:', questions); // Debugging output
    renderAnsweredQuestions();
        }


    // Render the answered questions

        function showAskQuestionForm() {
            document.getElementById('ask-question-form').classList.remove('hidden');
            document.getElementById('items-list').classList.add('hidden');
        }

        function showItemsList() {
            document.getElementById('items-list').classList.remove('hidden');
            document.getElementById('ask-question-form').classList.add('hidden');
            renderItems();
        }

        function askQuestion() {
            const questionText = document.getElementById('question-text').value;
            questions.push({ text: questionText, answered: false, answer: '' });
            localStorage.setItem('questions', JSON.stringify(questions));
            alert('Question asked successfully.');
            document.getElementById('question-text').value = '';
        }
        function showAnswerQuestions() {
            document.getElementById('answer-questions').classList.remove('hidden');
            document.getElementById('add-item-form').classList.add('hidden');
            renderQuestions();
        }
        function renderQuestions() {
            const container = document.getElementById('questions-list');
            container.innerHTML = '';
            questions.forEach((q, index) => {
                const div = document.createElement('div');
                div.className = 'question';
                div.innerHTML = `<p>${q.text}</p>`;
                if (!q.answered) {
                    const input = document.createElement('textarea');
                    input.placeholder = 'Your answer';
                    const button = document.createElement('button');
                    button.textContent = 'Answer';
                    button.onclick = () => answerQuestion(index, input.value);
                    div.appendChild(input);
                    div.appendChild(button);
                } else {
                    div.innerHTML += `<p><strong>Answer:</strong> ${q.answer}</p>`;
                }
                container.appendChild(div);
            });
        }

        function answerQuestion(index, answer) {
            questions[index].answered = true;
            questions[index].answer = answer;
            localStorage.setItem('questions', JSON.stringify(questions));
            renderQuestions();
        }





        

        function renderAnsweredQuestions() {
    const container = document.getElementById('answered-questions-list');
    container.innerHTML = ''; // Clear previous content

    questions.forEach(q => {
        if (q.answered) {
            const div = document.createElement('div');
            div.className = 'qa-box';
            div.innerHTML = `
                <div class="question-box">
                    <strong>Question:</strong>
                    <p>${q.text}</p>
                </div>
                <div class="answer-box">
                    <strong>Answer:</strong>
                    <p>${q.answer}</p>
                </div>
            `;
            container.appendChild(div);
        }
    });
}

function hideAllSections() {
    const sections = document.querySelectorAll('.container');
    sections.forEach(section => section.classList.add('hidden'));
}



function fetchQuestions() {
    fetch('http://localhost:3000/questions')
        .then(response => response.json())
        .then(fetchedQuestions => {
            questions = fetchedQuestions; // Update local questions array
            renderAnsweredQuestions();
        });
}



    </script>
</body>
</html>
